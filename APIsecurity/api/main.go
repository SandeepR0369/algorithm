package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type Res struct {
	Global struct {
		NewConfirmed   int `json:"NewConfirmed"`
		TotalConfirmed int `json:"TotalConfirmed"`
		NewDeaths      int `json:"NewDeaths"`
		TotalDeaths    int `json:"TotalDeaths"`
		NewRecovered   int `json:"NewRecovered"`
		TotalRecovered int `json:"TotalRecovered"`
	} `json:"Global"`
	Countries struct {
		Country        string `json:"Country"`
		CountryCode    string `json:"CountryCode"`
		Date           string `json:"Date"`
		NewConfirmed   int64  `json:"NewConfirmed"`
		NewDeaths      int64  `json:"NewDeaths"`
		NewRecovered   int64  `json:"NewRecovered"`
		Slug           string `json:"Slug"`
		TotalConfirmed int64  `json:"TotalConfirmed"`
		TotalDeaths    int64  `json:"TotalDeaths"`
		TotalRecovered int64  `json:"TotalRecovered"`
	} `json:"Countries"`
	Date time.Time `json:"Date"`
}

/*
type AutoGenerated struct {
	Global struct {
		NewConfirmed   int `json:"NewConfirmed"`
		TotalConfirmed int `json:"TotalConfirmed"`
		NewDeaths      int `json:"NewDeaths"`
		TotalDeaths    int `json:"TotalDeaths"`
		NewRecovered   int `json:"NewRecovered"`
		TotalRecovered int `json:"TotalRecovered"`
	} `json:"Global"`
	Countries []struct {
		Country        string    `json:"Country"`
		CountryCode    string    `json:"CountryCode"`
		Slug           string    `json:"Slug"`
		NewConfirmed   int       `json:"NewConfirmed"`
		TotalConfirmed int       `json:"TotalConfirmed"`
		NewDeaths      int       `json:"NewDeaths"`
		TotalDeaths    int       `json:"TotalDeaths"`
		NewRecovered   int       `json:"NewRecovered"`
		TotalRecovered int       `json:"TotalRecovered"`
		Date           time.Time `json:"Date"`
	} `json:"Countries"`
	Date time.Time `json:"Date"`
}*/

/*
type Global struct {
	NewConfirmed   int `json:"NewConfirmed"`
	TotalConfirmed int `json:"TotalConfirmed"`
	NewDeaths      int `json:"NewDeaths"`
	TotalDeaths    int `json:"TotalDeaths"`
	NewRecovered   int `json:"NewRecovered"`
	TotalRecovered int `json:"TotalRecovered"`
}

type Countries struct {
	Country        string `json:"Country"`
	CountryCode    string `json:"CountryCode"`
	Date           string `json:"Date"`
	NewConfirmed   int64  `json:"NewConfirmed"`
	NewDeaths      int64  `json:"NewDeaths"`
	NewRecovered   int64  `json:"NewRecovered"`
	Slug           string `json:"Slug"`
	TotalConfirmed int64  `json:"TotalConfirmed"`
	TotalDeaths    int64  `json:"TotalDeaths"`
	TotalRecovered int64  `json:"TotalRecovered"`
}

type Date struct {
	Date time.Time `json:"Date"`
}
*/
func main() {
	response, err := http.Get("https://api.covid19api.com/summary")

	if err != nil {
		log.Printf("ERROR1 %s", err)
	}

	data, _ := ioutil.ReadAll(response.Body)
	fmt.Println("RES", string(data))

	var jsonData map[string]Res

	if err := json.Unmarshal(jsonBytes, &jsonData); err != nil {
		fmt.Println(err)
	}
	fmt.Printf("%+v", jsonData)

	jsonValue, _ := json.Marshal(jsonData)
	fmt.Println("JS", jsonValue)

	client, err := mongo.NewClient(options.Client().ApplyURI("mongodb://localhost:27017"))

	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)
	err = client.Connect(ctx)
	//err = client.Ping(ctx, readpref.Primary())

	fmt.Println("connected", err)
	collection := client.Database("firstdb").Collection("covid")
	var docs []Res
	ab := json.Unmarshal(jsonValue, &docs)

	fmt.Println("AB", ab)

	//fmt.Println("Collection type:", reflect.TypeOf(col), "n")

	//res, err := collection.InsertOne()

}
